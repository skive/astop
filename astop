#!/usr/bin/env python
# -*- encoding: utf8 -*-

import curses, traceback, time, thread, os, sys
from subprocess import Popen, PIPE

def main(stdscr):
  global screen
  global screen2
  global title
  global c
  global callnumlist
  global highestnumcalls
  global currentnumcalls
  callnumlist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  highestnumcalls = 10
  currentnumcalls = 0
  c = 49
  check_root()
  check_asterisk()
  screen = stdscr.subwin(0, 0)
  screen2 = stdscr.subwin(0, 0)
  curses.start_color()
  curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
  curses.init_pair(2, curses.COLOR_YELLOW, curses.COLOR_BLACK)
  curses.init_pair(3, curses.COLOR_RED, curses.COLOR_BLACK)
  #screen.bkgd(curses.color_pair(1))
  # Get window diminsions
  global y, x;
  y, x = screen.getmaxyx()
  global cur_x, cur_y;
  title = "ASTOP » "
  # Sets the cursor to center the text on screen
  cur_x = (x/2)-(len(title))/2
  cur_y = (y/2)
  # Add string to screen
  screen.addstr( 0, cur_x, title) 
  print_toolbar(y, x)
  screen.refresh() # Refresh to populate screen with data
 
  thread.start_new_thread(opt_calls, ())
  c = screen.getch() # Get char
  c2 = 0
  while c != ord('q'): # Exit loop if char caught is 'q'
    
	if c2 != c: # Stops two thread of the same function being started
		if 49 <= c <= 53:
			screen.erase()	
    		if c == 49:
			thread.start_new_thread(opt_calls, ())
    		elif c == 50:
			thread.start_new_thread(opt_peers, ())
    		elif c == 51:
			thread.start_new_thread(opt_sip, ())
    		elif c == 52:
			thread.start_new_thread(opt_registry, ())
#    		elif c == 53:
#			thread.start_new_thread(opt_iax, ())
	c2 = c
    	c = screen.getch()
  return

# Exit displaying error if user is not root
def check_root():
	if not os.geteuid() == 0:
        	sys.exit('ERROR: asttop must be run as root.')

# Exit displaying error if asterisk is not started
def check_asterisk():
	p = Popen(["ps", "-Af"], stdout=PIPE)
	out, err = p.communicate()
	if ('asterisk' not in out):
        	sys.exit('ERROR: asterisk is not running.')

# Gets number of calls from asterisk
def check_active_calls():
        p = Popen(["asterisk", "-rx", "core show calls"], stdout=PIPE)
        out, err = p.communicate()
        s = out.splitlines()[0]
        s2 = s.split(' ')[0]
        return int(s2)

# Builds the calls graph
def gen_calls_graph():
	screen2.erase()
        count = 0
        block = "»"
        #block = "¤"
	linenum = 3
        for callnum in callnumlist:
                value = (float(callnumlist[count]) / float(highestnumcalls)) * 100
                prntstr =  block * int(value)
                screen2.addstr(linenum, 2, "[")
		
		if value <= 33:
                	screen2.addstr(linenum, 3, prntstr, curses.color_pair(1))
		elif 33 < value <= 66:
			screen2.addstr(linenum, 3, prntstr, curses.color_pair(2))
		elif value > 66:
                	screen2.addstr(linenum, 3, prntstr, curses.color_pair(3))
		
		screen2.addstr(linenum, 104, "] " + str(callnumlist[count]))
		
		if count != 29:
                        callnumlist[count] = callnumlist[count + 1 ]
                count = count +1
		linenum = linenum + 1
	screen2.refresh()
	draw_decor()

def draw_decor():
	screen.addstr( 1, 2, title)
	print_toolbar(y, x)
	screen.refresh()

# Run an asterisk command and print the result
def run_ast_comm(ast_comm_str):
		screen2.erase()
		proc = Popen(['asterisk', '-rx', ast_comm_str], stdout=PIPE, stderr=PIPE)
                return_code = proc.wait()
                if return_code == 0:
                        linenum = 3
                        for line in iter(proc.stdout.readline,''):
                                linestr =  line.rstrip() + "\r"
                                screen2.addstr(linenum, 2, linestr)
                                linenum = linenum + 1
                                if linenum > 50:
                            	    screen2.addstr(linenum,2,'...')
                            	    break
                else:
                        linestr = "Failure %s:\n%s" % (return_code, proc.stderr.read())
                        screen2.addstr(linenum, 2, linestr)
		screen2.refresh()
		draw_decor()

# Prints out the toolbar string
def print_toolbar(y, x):
	global c
	callsstr = "1:CALLS"
	peersstr = "2:PEERS"
	sipstr = "3:SIP"
	registrystr = "4:REGISTRY"
#	iaxstr = "5:IAX"
	quitstr = "Q:QUIT"


	if c == 49:
		screen.addstr(1, 12, callsstr, curses.color_pair(1))
	else:
		screen.addstr(1, 12, callsstr, curses.color_pair(0))

	if c == 50:
		screen.addstr(1, 20, peersstr, curses.color_pair(1))
	else:
		screen.addstr(1, 20, peersstr, curses.color_pair(0))

	if c == 51:
		screen.addstr(1, 28, sipstr, curses.color_pair(1))
	else:
		screen.addstr(1, 28, sipstr, curses.color_pair(0))

	if c == 52:
		screen.addstr(1, 34, registrystr, curses.color_pair(1))
	else:
		screen.addstr(1, 34, registrystr, curses.color_pair(0))

	#if c == 53:
		#screen.addstr(1, 45, iaxstr, curses.color_pair(1))
	#else:
		#screen.addstr(1, 45, iaxstr, curses.color_pair(0))

	screen.addstr(1, 45, quitstr, curses.color_pair(0))
	
def opt_calls():
        screen2.erase()
        draw_decor()
	while c == 49:
                currentnumcalls = check_active_calls()
		gen_calls_graph()
		callnumlist[29] = currentnumcalls
                time.sleep(1)

#def opt_iax():
#        screen2.erase()
#        draw_decor()
#	while c == 53: 
#		run_ast_comm("iax2 show netstats")
#                time.sleep(1)

def opt_registry():
#	global d_running
        screen2.erase()
        draw_decor()
        while c == 52:
		run_ast_comm("sip show registry");
#		screen2.refresh()
		time.sleep(1)
	
def opt_peers():
        screen2.erase()
        draw_decor()
	while c == 50:
                run_ast_comm("sip show peers")
                time.sleep(1)

def opt_sip():
        screen2.erase()
        draw_decor()
	while c == 51:
                run_ast_comm("sip show channelstats")
                time.sleep(1)

if __name__ == '__main__':
  try:
    # Initialize curses
    stdscr=curses.initscr()

    # Turn off echoing of keys, and enter cbreak mode,
    # where no buffering is performed on keyboard input
    curses.noecho()
    curses.cbreak()

    # In keypad mode, escape sequences for special keys
    # will be interpreted and a special value like
    # curses.KEY_LEFT will be returned
    stdscr.keypad(1)
    curses.curs_set(0) # Hide cursor position

    main(stdscr) # enter main loop
  except curses.error:
    # In the event of error, restore terminal to sane state
    traceback.print_exc() # Print the exception
    print(curses.ERR)
  except KeyboardInterrupt:
    # Caught KeyboardInterrupt (Gets rid of stacktrace)
    # Set everything back to normal before exit
    stdscr.keypad(0)
    curses.echo()
    curses.nocbreak()
    curses.endwin()
    exit()
  finally:
    # Set everything back to normal
    stdscr.keypad(0)
    curses.echo()
    curses.nocbreak()
    curses.endwin()
